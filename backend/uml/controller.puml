@startuml

' Abstract classes

abstract class AbstractController {
    {abstract} +getAll(req: Request, res: Response): Promise<Response>
    {abstract} +getById(req: Request, res: Response): Promise<Response>
    {abstract} +create(req: Request, res: Response): Promise<Response>
    {abstract} +update(req: Request, res: Response): Promise<Response>
    {abstract} +onResolve(req: Request, res: Response): Promise<Response>
    {abstract} +onReject(req: Request, res: Response): Promise<Response>
    {abstract} +handleError(req: Request, res: Response): Promise<Response>
    -abstractService : AbstractService
}

' Concrete controller classes
class BookingController extends AbstractController {
    +getByCurrentUserId(req: Request, res: Response): Promise<Response>
    +getSuggestedTimes(req: Request, res: Response): Promise<Response>
    +getAvailableRoom(req: Request, res: Response): Promise<Response>
}


class BuildingController extends AbstractController {
}


class EventController extends AbstractController {
    +getAvailableRoom(req: Request, res: Response): Promise<Response>
    +getByCurrentUser(req: Request, res: Response): Promise<Response>
    +delete(req: Request, res: Response): Promise<Response>
}

class RoomController extends AbstractController {
}

class UserController extends AbstractController {
    +getAllEmail(req: Request, res: Response): Promise<Response>
    +login(req: Request, res: Response): Promise<Response>
    +upload(req: Request, res: Response): Promise<Response>
}

@enduml