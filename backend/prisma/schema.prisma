generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model bookings {
  booking_id     Int              @id @default(autoincrement())
  created_by     Int
  created_at     DateTime         @db.Timestamp(6)
  start_time     DateTime         @db.Timestamp(6)
  end_time       DateTime         @db.Timestamp(6)
  status         status
  users          users            @relation(fields: [created_by], references: [user_id], onDelete: NoAction, onUpdate: NoAction)
  users_bookings users_bookings[]
}

model buildings {
  building_id Int     @id @default(autoincrement())
  city_id     String  @db.Char(3)
  code        Int
  address     String
  lat         Decimal @db.Decimal(9, 6)
  lon         Decimal @db.Decimal(9, 6)
  is_active   Boolean
  cities      cities  @relation(fields: [city_id], references: [city_id], onDelete: NoAction, onUpdate: NoAction)
  rooms       rooms[]
  users       users[]

  @@unique([city_id, code])
}

model cities {
  city_id        String      @id @db.Char(3)
  name           String
  province_state String
  buildings      buildings[]
}

model equipments {
  equipment_id     String             @id @db.Char(2)
  description      String
  rooms_equipments rooms_equipments[]
}

model rooms {
  room_id          Int                @id @default(autoincrement())
  building_id      Int
  floor            Int
  code             String
  name             String
  seats            Int
  is_active        Boolean
  buildings        buildings          @relation(fields: [building_id], references: [building_id], onDelete: NoAction, onUpdate: NoAction)
  rooms_equipments rooms_equipments[]
  users_bookings   users_bookings[]

  @@unique([building_id, floor, code])
}

model rooms_equipments {
  room_id      Int
  equipment_id String     @db.Char(2)
  equipments   equipments @relation(fields: [equipment_id], references: [equipment_id], onDelete: NoAction, onUpdate: NoAction)
  rooms        rooms      @relation(fields: [room_id], references: [room_id], onDelete: NoAction, onUpdate: NoAction)

  @@id([room_id, equipment_id])
}

model users {
  user_id        Int              @id @default(autoincrement())
  username       String           @unique
  first_name     String
  last_name      String
  email          String           @unique
  building_id    Int
  floor          Int
  desk           Int
  role           role
  is_active      Boolean
  bookings       bookings[]
  events         events[]
  buildings      buildings        @relation(fields: [building_id], references: [building_id], onDelete: NoAction, onUpdate: NoAction)
  users_bookings users_bookings[]
}

model users_bookings {
  user_id    Int
  booking_id Int
  room_id    Int
  bookings   bookings @relation(fields: [booking_id], references: [booking_id], onDelete: NoAction, onUpdate: NoAction)
  rooms      rooms    @relation(fields: [room_id], references: [room_id], onDelete: NoAction, onUpdate: NoAction)
  users      users    @relation(fields: [user_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction)

  @@id([user_id, booking_id])
}

model distances {
  building_id_from Int
  building_id_to   Int
  distance         Int

  @@id([building_id_from, building_id_to])
}

model events {
  event_id   Int      @id @default(autoincrement())
  title      String
  created_by Int
  start_time DateTime @db.Timestamp(6)
  end_time   DateTime @db.Timestamp(6)
  users      users    @relation(fields: [created_by], references: [user_id], onDelete: NoAction, onUpdate: NoAction)
}

enum role {
  admin
  staff
}

enum status {
  confirmed
  canceled
}
